name: Rust Docs to Wiki

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - '.github/workflows/rust-docs-to-wiki.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup directories
        run: |
          mkdir -p wiki-content
          
          # Create Home.md
          echo "# ${GITHUB_REPOSITORY#*/} Documentation" > wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "This wiki contains automatically generated documentation from the Rust codebase." >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "## Modules" >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md

      - name: Create basic extractor
        run: |
          cat > extract_docs.sh << 'EOF'
          #!/bin/bash
          
          # Simple but reliable extractor for Rust documentation
          
          source_dir=$1
          output_dir=$2
          
          if [ -z "$source_dir" ] || [ -z "$output_dir" ]; then
            echo "Usage: $0 <source_dir> <output_dir>"
            exit 1
          fi
          
          if [ ! -d "$source_dir" ]; then
            echo "Error: Source directory does not exist: $source_dir"
            exit 1
          fi
          
          if [ ! -d "$output_dir" ]; then
            echo "Error: Output directory does not exist: $output_dir"
            exit 1
          fi
          
          # Process a single Rust file
          process_file() {
            local file="$1"
            local output_dir="$2"
            
            # Get file info
            local base_name=$(basename "$file" .rs)
            local dir_path=$(dirname "$file")
            
            # Create unique name for wiki page
            local unique_name=$(echo "${dir_path//\//_}_${base_name}" | sed 's/^src_//')
            local output_file="$output_dir/${unique_name}.md"
            
            echo "Processing $file -> $output_file"
            
            # Create file header
            echo "# $base_name ($dir_path)" > "$output_file"
            echo "" >> "$output_file"
            echo "Path: \`$file\`" >> "$output_file"
            echo "" >> "$output_file"
            
            # Extract module docs (//!)
            grep -n "^[[:space:]]*//!" "$file" | sed 's/^[0-9]*://g' | sed 's/\/\/![[:space:]]*//' > "$output_file.module_docs"
            if [ -s "$output_file.module_docs" ]; then
              echo "## Module Documentation" >> "$output_file"
              echo "" >> "$output_file"
              cat "$output_file.module_docs" >> "$output_file"
              echo "" >> "$output_file"
              echo "" >> "$output_file"
            fi
            rm -f "$output_file.module_docs"
            
            # Extract all public items
            PUBLIC_ITEMS=$(grep -n "^[[:space:]]*pub " "$file")
            
            if [ -n "$PUBLIC_ITEMS" ]; then
              echo "## Table of Contents" >> "$output_file"
              echo "" >> "$output_file"
              
              echo "$PUBLIC_ITEMS" | while read -r line_info; do
                # Extract line content
                line=$(echo "$line_info" | cut -d: -f2-)
                
                # Try to determine item type and name
                if [[ "$line" =~ pub[[:space:]]+struct[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                  item_type="struct"
                  item_name="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ pub[[:space:]]+enum[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                  item_type="enum"
                  item_name="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ pub[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                  item_type="fn"
                  item_name="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ pub[[:space:]]+async[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                  item_type="async fn"
                  item_name="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ pub[[:space:]]+trait[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                  item_type="trait"
                  item_name="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ pub[[:space:]]+type[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                  item_type="type"
                  item_name="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ pub[[:space:]]+mod[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                  item_type="mod"
                  item_name="${BASH_REMATCH[1]}"
                elif [[ "$line" =~ pub[[:space:]]+use[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                  item_type="use"
                  item_name="${BASH_REMATCH[1]}"
                fi
                
                if [ -n "$item_name" ]; then
                  echo "* [$item_type $item_name](#${item_name,,})" >> "$output_file"
                fi
              done
              
              echo "" >> "$output_file"
              echo "## Public Items" >> "$output_file"
              echo "" >> "$output_file"
            fi
            
            # Process each item
            echo "$PUBLIC_ITEMS" | while read -r line_info; do
              # Get line number and content
              line_num=$(echo "$line_info" | cut -d: -f1)
              line=$(echo "$line_info" | cut -d: -f2-)
              
              # Determine item type and name
              item_type=""
              item_name=""
              
              if [[ "$line" =~ pub[[:space:]]+struct[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="struct"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+enum[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="enum"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="fn"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+async[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="async fn"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+trait[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="trait"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+type[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="type"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+mod[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="mod"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+use[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="use"
                item_name="${BASH_REMATCH[1]}"
              fi
              
              if [ -n "$item_type" ] && [ -n "$item_name" ]; then
                # Check if there are doc comments above this item
                doc_comments=""
                doc_line_num=$((line_num - 1))
                
                # Go backwards to collect doc comments
                while [ $doc_line_num -gt 0 ]; do
                  doc_line=$(sed -n "${doc_line_num}p" "$file")
                  
                  if [[ "$doc_line" =~ ^[[:space:]]*\/\/\/ ]]; then
                    # Extract the comment without ///
                    comment=$(echo "$doc_line" | sed 's/^[[:space:]]*\/\/\/[[:space:]]*//')
                    doc_comments="$comment
$doc_comments"
                    doc_line_num=$((doc_line_num - 1))
                  elif [[ "$doc_line" =~ ^[[:space:]]*$ ]]; then
                    # Skip empty lines
                    doc_line_num=$((doc_line_num - 1))
                  elif [[ "$doc_line" =~ ^[[:space:]]*#\[ ]]; then
                    # Skip attribute lines
                    doc_line_num=$((doc_line_num - 1))
                  else
                    # Stop at any other content
                    break
                  fi
                done
                
                # Write item header
                echo "### $item_type $item_name" >> "$output_file"
                echo "" >> "$output_file"
                
                # Format and write doc comments if any
                if [ -n "$doc_comments" ]; then
                  # Fix headers in comments (# Arguments -> ## Arguments)
                  doc_comments=$(echo "$doc_comments" | sed 's/# \([A-Z][a-z]*\)/\n## \1/g')
                  
                  # Fix lists to ensure proper spacing
                  doc_comments=$(echo "$doc_comments" | sed -z 's/\([^*]\)\n\* /\1\n\n* /g')
                  
                  # Write to file
                  echo "$doc_comments" >> "$output_file"
                  echo "" >> "$output_file"
                fi
                
                # Extract item signature
                echo "```rust" >> "$output_file"
                echo "$line" >> "$output_file"
                
                # For multi-line items
                if ! [[ "$line" =~ \;$ ]]; then
                  if [[ "$line" =~ \{$ ]]; then
                    # If opening brace is on the same line
                    echo "    // ... implementation" >> "$output_file"
                    echo "}" >> "$output_file"
                  else
                    # For multi-line signatures
                    next_line_num=$((line_num + 1))
                    next_line=$(sed -n "${next_line_num}p" "$file")
                    
                    # Add a few more lines of signature if no brace or semicolon yet
                    for i in {1..5}; do
                      if [[ "$next_line" =~ [\;\{] ]]; then
                        echo "$next_line" >> "$output_file"
                        if [[ "$next_line" =~ \{$ ]]; then
                          echo "    // ... implementation" >> "$output_file"
                          echo "}" >> "$output_file"
                        fi
                        break
                      else
                        echo "$next_line" >> "$output_file"
                        next_line_num=$((next_line_num + 1))
                        next_line=$(sed -n "${next_line_num}p" "$file")
                      fi
                    done
                  fi
                fi
                
                echo "```" >> "$output_file"
                echo "" >> "$output_file"
              fi
            done
            
            # Add link to Home.md
            echo "* [$unique_name]($unique_name)" >> "$output_dir/Home.md"
            
            echo "Completed processing $file"
          }
          
          # Find and process all Rust files
          find "$source_dir" -name "*.rs" -type f | while read -r file; do
            process_file "$file" "$output_dir"
          done
          
          echo "Documentation extraction complete!"
          EOF
          
          chmod +x extract_docs.sh

      - name: Generate Wiki Documentation
        run: |
          # Run the doc extraction script
          ./extract_docs.sh src wiki-content

      - name: Setup Git for Wiki
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Clone Wiki Repository
        run: |
          # Use PAT for wiki push
          git clone https://${{ secrets.WIKI_TOKEN }}@github.com/${{ github.repository }}.wiki.git wiki-repo
          
          # Copy content to wiki
          cp -r wiki-content/* wiki-repo/
          
          cd wiki-repo
          git add .
          
          # Commit if changes exist
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation from Rust code (${GITHUB_SHA:0:7})"
            git push
          fi

      - name: Upload Markdown as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wiki-docs
          path: wiki-content/
