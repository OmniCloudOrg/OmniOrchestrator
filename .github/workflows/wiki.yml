name: Rust Docs to Wiki with cargo-readme

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - '.github/workflows/rust-docs-to-wiki.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  extract-docs-and-update-wiki:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Install cargo-readme
        run: cargo install cargo-readme

      - name: Create wiki directories and template
        run: |
          # Create directory for wiki content
          mkdir -p wiki-content
          
          # Create Home.md
          echo "# ${GITHUB_REPOSITORY#*/} Documentation" > wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "This wiki contains automatically generated documentation from the Rust codebase." >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "## Modules" >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          
          # Create template file for cargo-readme
          echo "# {{title}}" > readme.tpl
          echo "" >> readme.tpl
          echo "Path: \`{{file_path}}\`" >> readme.tpl
          echo "" >> readme.tpl
          echo "{{readme}}" >> readme.tpl
          echo "" >> readme.tpl
          echo "## Public API" >> readme.tpl
          echo "" >> readme.tpl
          echo "{{public_items}}" >> readme.tpl

      - name: Process Rust files
        run: |
          # Find all .rs files
          find src -name "*.rs" -type f > rs_files.txt
          
          # Process each file
          while IFS= read -r file; do
            # Get file info
            base_name=$(basename "$file" .rs)
            dir_path=$(dirname "$file")
            
            # Create unique filename
            unique_name=$(echo "${dir_path//\//_}_${base_name}" | sed 's/^src_//')
            output_file="wiki-content/${unique_name}.md"
            
            echo "Processing $file into $output_file"
            
            # Create temporary directory for the "crate"
            temp_dir=$(mktemp -d)
            mkdir -p "$temp_dir/src"
            
            # Copy the file as lib.rs
            cp "$file" "$temp_dir/src/lib.rs"
            
            # Create minimal Cargo.toml
            echo "[package]" > "$temp_dir/Cargo.toml"
            echo "name = \"${base_name}\"" >> "$temp_dir/Cargo.toml"
            echo "version = \"0.1.0\"" >> "$temp_dir/Cargo.toml"
            echo "edition = \"2021\"" >> "$temp_dir/Cargo.toml"
            echo "" >> "$temp_dir/Cargo.toml"
            echo "[lib]" >> "$temp_dir/Cargo.toml"
            echo "path = \"src/lib.rs\"" >> "$temp_dir/Cargo.toml"
            
            # Extract public items separately
            public_items=$(grep -n "^pub " "$file" | while read -r line_info; do
              line=$(echo "$line_info" | cut -d: -f2-)
              
              # Extract simpler signature without full implementation
              signature=$(echo "$line" | sed -E 's/\{.*$//g')
              
              # Output markdown code block for the item
              echo "### \`$signature\`"
              echo ""
              echo "```rust"
              echo "$signature"
              echo "```"
              echo ""
            done)
            
            # Create a JSON file with our variables
            echo "{\"title\":\"$base_name ($dir_path)\",\"file_path\":\"$file\",\"public_items\":\"$public_items\"}" > "$temp_dir/readme_vars.json"
            
            # Run cargo-readme in the temp directory
            (
              cd "$temp_dir"
              
              # Run cargo-readme and redirect to output file
              RUST_BACKTRACE=1 cargo readme --template "$GITHUB_WORKSPACE/readme.tpl" --output "$GITHUB_WORKSPACE/$output_file" --no-title --no-badge --no-license --json readme_vars.json || true
              
              # If cargo-readme fails, create a minimal file
              if [ ! -f "$GITHUB_WORKSPACE/$output_file" ] || [ ! -s "$GITHUB_WORKSPACE/$output_file" ]; then
                echo "# $base_name ($dir_path)" > "$GITHUB_WORKSPACE/$output_file"
                echo "" >> "$GITHUB_WORKSPACE/$output_file"
                echo "Path: \`$file\`" >> "$GITHUB_WORKSPACE/$output_file"
                echo "" >> "$GITHUB_WORKSPACE/$output_file"
                echo "## Public API" >> "$GITHUB_WORKSPACE/$output_file"
                echo "" >> "$GITHUB_WORKSPACE/$output_file"
                echo "$public_items" >> "$GITHUB_WORKSPACE/$output_file"
              fi
            )
            
            # Add link to home page
            echo "* [$unique_name](${unique_name})" >> wiki-content/Home.md
            
            # Clean up
            rm -rf "$temp_dir"
          done < rs_files.txt

      - name: Setup Git for Wiki
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Clone Wiki Repository
        run: |
          # Use PAT for wiki push
          git clone https://${{ secrets.WIKI_TOKEN }}@github.com/${{ github.repository }}.wiki.git wiki-repo
          
          # Copy content to wiki
          cp -r wiki-content/* wiki-repo/
          
          cd wiki-repo
          git add .
          
          # Commit if changes exist
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation from Rust code (${GITHUB_SHA:0:7})"
            git push
          fi

      - name: Upload Markdown as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wiki-docs
          path: wiki-content/
