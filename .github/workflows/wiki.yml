name: Rust Docs to Wiki

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - '.github/workflows/rust-docs-to-wiki.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  extract-doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create wiki directory
        run: mkdir -p wiki-content

      - name: Process all Rust files
        run: |
          # Create Home.md
          echo "# ${GITHUB_REPOSITORY#*/} Documentation" > wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "This wiki contains automatically generated documentation from the Rust codebase." >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "## Modules" >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md

          # Very simple direct processing of all Rust files
          find src -name "*.rs" -type f | while read -r file; do
            # Get file info
            base_name=$(basename "$file" .rs)
            dir_path=$(dirname "$file")
            
            # Create unique file name
            unique_name=$(echo "${dir_path//\//_}_${base_name}" | sed 's/^src_//')
            output_file="wiki-content/${unique_name}.md"
            
            echo "Processing $file into $output_file"
            
            # Create file header
            echo "# $base_name ($dir_path)" > "$output_file"
            echo "" >> "$output_file"
            echo "Path: \`$file\`" >> "$output_file"
            echo "" >> "$output_file"
            
            # Extract module docs
            grep -n "^[[:space:]]*//!" "$file" | sed 's/^[0-9]*://g' | sed 's/\/\/![[:space:]]*//' > "$output_file.module_docs"
            if [ -s "$output_file.module_docs" ]; then
              echo "## Module Documentation" >> "$output_file"
              echo "" >> "$output_file"
              cat "$output_file.module_docs" >> "$output_file"
              echo "" >> "$output_file"
            fi
            rm -f "$output_file.module_docs"
            
            # Add all public items
            extracted_items=0
            
            # PROCESS ALL PUBLIC MODULES FIRST - GUARANTEED CAPTURE
            echo "## Public Modules" >> "$output_file"
            echo "" >> "$output_file"
            
            # Extract all pub mod declarations directly and explicitly
            grep -n "^[[:space:]]*pub[[:space:]]\+mod[[:space:]]\+[a-zA-Z0-9_]\+[[:space:]]*;" "$file" | while read -r line_info; do
              line=$(echo "$line_info" | cut -d: -f2-)
              
              # Extract module name directly using sed
              mod_name=$(echo "$line" | sed -E 's/^[[:space:]]*pub[[:space:]]+mod[[:space:]]+([a-zA-Z0-9_]+)[[:space:]]*;.*/\1/')
              
              if [ -n "$mod_name" ]; then
                echo "### mod $mod_name" >> "$output_file"
                echo "" >> "$output_file"
                
                # Try to find any doc comment above
                line_num=$(echo "$line_info" | cut -d: -f1)
                prev_line=$((line_num - 1))
                doc_content=""
                
                # Check the line directly above for doc comment
                if [ $prev_line -gt 0 ]; then
                  prev_content=$(sed -n "${prev_line}p" "$file")
                  if [[ "$prev_content" =~ ^[[:space:]]*\/\/\/ ]]; then
                    doc_content=$(echo "$prev_content" | sed 's/^[[:space:]]*\/\/\/[[:space:]]*//')
                    echo "$doc_content" >> "$output_file"
                    echo "" >> "$output_file"
                  fi
                fi
                
                # Add the module signature
                echo "```rust" >> "$output_file"
                echo "$line" >> "$output_file"
                echo "```" >> "$output_file"
                echo "" >> "$output_file"
                
                extracted_items=$((extracted_items + 1))
              fi
            done
            
            # Then do all other pub items
            echo "## Other Public Items" >> "$output_file"
            echo "" >> "$output_file"
            
            # Get all public items except modules
            grep -n "^[[:space:]]*pub[[:space:]]\+" "$file" | grep -v "pub[[:space:]]\+mod" | while read -r line_info; do
              line_num=$(echo "$line_info" | cut -d: -f1)
              line=$(echo "$line_info" | cut -d: -f2-)
              
              # Determine item type and name
              item_type=""
              item_name=""
              
              if [[ "$line" =~ pub[[:space:]]+struct[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="struct"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+enum[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="enum"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+trait[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="trait"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+async[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="async fn"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="fn"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+type[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="type"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+const[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="const"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+use[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="use"
                item_name="${BASH_REMATCH[1]}"
              fi
              
              if [ -n "$item_type" ] && [ -n "$item_name" ]; then
                echo "### $item_type $item_name" >> "$output_file"
                echo "" >> "$output_file"
                
                # Check for doc comments above
                doc_start=$((line_num - 1))
                while [ $doc_start -gt 0 ]; do
                  doc_line=$(sed -n "${doc_start}p" "$file")
                  if [[ "$doc_line" =~ ^[[:space:]]*\/\/\/ ]]; then
                    comment=$(echo "$doc_line" | sed 's/^[[:space:]]*\/\/\/[[:space:]]*//')
                    echo "$comment" >> "$output_file.doc"
                    doc_start=$((doc_start - 1))
                  elif [[ "$doc_line" =~ ^[[:space:]]*$ ]] || [[ "$doc_line" =~ ^[[:space:]]*#\[ ]]; then
                    # Skip empty lines and attributes
                    doc_start=$((doc_start - 1))
                  else
                    break
                  fi
                done
                
                # If we found doc comments, add them
                if [ -f "$output_file.doc" ]; then
                  # Reverse the order to get correct flow
                  tac "$output_file.doc" > "$output_file.doc.reversed"
                  cat "$output_file.doc.reversed" >> "$output_file"
                  echo "" >> "$output_file"
                  rm -f "$output_file.doc" "$output_file.doc.reversed"
                fi
                
                # Add signature
                echo "```rust" >> "$output_file"
                echo "$line" >> "$output_file"
                echo "```" >> "$output_file"
                echo "" >> "$output_file"
                
                extracted_items=$((extracted_items + 1))
              fi
            done
            
            # If no items were extracted, add a message
            if [ "$extracted_items" -eq 0 ]; then
              echo "No public items found in this file." >> "$output_file"
              echo "" >> "$output_file"
            fi
            
            # Add link to Home.md
            echo "* [$unique_name](${unique_name})" >> wiki-content/Home.md
          done

      - name: Setup Git for Wiki
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Clone Wiki Repository
        run: |
          # Use PAT for wiki push
          git clone https://${{ secrets.WIKI_TOKEN }}@github.com/${{ github.repository }}.wiki.git wiki-repo
          
          # Copy content to wiki
          cp -r wiki-content/* wiki-repo/
          
          cd wiki-repo
          git add .
          
          # Commit if changes exist
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation from Rust code (${GITHUB_SHA:0:7})"
            git push
          fi

      - name: Upload Markdown as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wiki-docs
          path: wiki-content/
