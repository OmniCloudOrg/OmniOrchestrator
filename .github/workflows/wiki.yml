name: Rust Docs to Wiki

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - '.github/workflows/rust-docs-to-wiki.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  extract-doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create wiki directory
        run: mkdir -p wiki-content

      - name: Process all Rust files
        run: |
          # Create Home.md
          echo "# ${GITHUB_REPOSITORY#*/} Documentation" > wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "This wiki contains automatically generated documentation from the Rust codebase." >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "## Modules" >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md

          # Very simple direct processing of all Rust files
          find src -name "*.rs" -type f | while read -r file; do
            # Get file info
            base_name=$(basename "$file" .rs)
            dir_path=$(dirname "$file")
            
            # Create unique file name
            unique_name=$(echo "${dir_path//\//_}_${base_name}" | sed 's/^src_//')
            output_file="wiki-content/${unique_name}.md"
            
            echo "Processing $file into $output_file"
            
            # Create file header
            echo "# $base_name ($dir_path)" > "$output_file"
            echo "" >> "$output_file"
            echo "Path: \`$file\`" >> "$output_file"
            echo "" >> "$output_file"
            
            # Extract module docs
            grep -n "^[[:space:]]*//!" "$file" | sed 's/^[0-9]*://g' | sed 's/\/\/![[:space:]]*//' > "$output_file.module_docs"
            if [ -s "$output_file.module_docs" ]; then
              echo "## Module Documentation" >> "$output_file"
              echo "" >> "$output_file"
              cat "$output_file.module_docs" >> "$output_file"
              echo "" >> "$output_file"
            fi
            rm -f "$output_file.module_docs"
            
            # Generate TOC
            echo "## Table of Contents" >> "$output_file"
            echo "" >> "$output_file"
            
            # Process all public items for TOC (combined modules and other items)
            grep -n "^[[:space:]]*pub[[:space:]]\+" "$file" | while read -r line_info; do
              line=$(echo "$line_info" | cut -d: -f2-)
              
              # Determine item type and name
              if [[ "$line" =~ pub[[:space:]]+mod[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="mod"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#mod-${item_name})" >> "$output_file"
              elif [[ "$line" =~ pub[[:space:]]+(struct)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
                echo "* [$item_type $item_name](#${item_type}-${item_name})" >> "$output_file"
              elif [[ "$line" =~ pub[[:space:]]+(enum)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
                echo "* [$item_type $item_name](#${item_type}-${item_name})" >> "$output_file"
              elif [[ "$line" =~ pub[[:space:]]+(trait)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
                echo "* [$item_type $item_name](#${item_type}-${item_name})" >> "$output_file"
              elif [[ "$line" =~ pub[[:space:]]+async[[:space:]]+(fn)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="async fn"
                item_name="${BASH_REMATCH[2]}"
                echo "* [$item_type $item_name](#async-fn-${item_name})" >> "$output_file"
              elif [[ "$line" =~ pub[[:space:]]+(fn)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
                echo "* [$item_type $item_name](#fn-${item_name})" >> "$output_file"
              elif [[ "$line" =~ pub[[:space:]]+(type)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
                echo "* [$item_type $item_name](#type-${item_name})" >> "$output_file"
              elif [[ "$line" =~ pub[[:space:]]+(const)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
                echo "* [$item_type $item_name](#const-${item_name})" >> "$output_file"
              fi
            done
            
            echo "" >> "$output_file"
            echo "## Public Items" >> "$output_file"
            echo "" >> "$output_file"
            
            # Process all public items in file order (a single loop for all types)
            extracted_items=0
            
            # Sort the lines numerically to maintain file order
            grep -n "^[[:space:]]*pub[[:space:]]\+" "$file" | sort -n | while read -r line_info; do
              line_num=$(echo "$line_info" | cut -d: -f1)
              line=$(echo "$line_info" | cut -d: -f2-)
              
              # Determine item type and name
              item_type=""
              item_name=""
              
              if [[ "$line" =~ pub[[:space:]]+mod[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="mod"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+(struct)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
              elif [[ "$line" =~ pub[[:space:]]+(enum)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
              elif [[ "$line" =~ pub[[:space:]]+(trait)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
              elif [[ "$line" =~ pub[[:space:]]+async[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="async fn"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$line" =~ pub[[:space:]]+(fn)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
              elif [[ "$line" =~ pub[[:space:]]+(type)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
              elif [[ "$line" =~ pub[[:space:]]+(const)[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="${BASH_REMATCH[1]}"
                item_name="${BASH_REMATCH[2]}"
              fi
              
              if [ -n "$item_type" ] && [ -n "$item_name" ]; then
                # Add title
                if [[ "$item_type" == "async fn" ]]; then
                  echo "### async fn $item_name" >> "$output_file"
                else
                  echo "### $item_type $item_name" >> "$output_file"
                fi
                echo "" >> "$output_file"
                
                # Extract the entire item definition
                def_start_line=$line_num
                def_lines=("$line")
                current_indent=""
                
                # Determine initial indentation
                if [[ "$line" =~ ^([[:space:]]*) ]]; then
                  current_indent="${BASH_REMATCH[1]}"
                fi
                
                # For struct, enum, trait, impl definitions that span multiple lines
                if [[ "$line" =~ \{$ ]]; then
                  # If line ends with opening brace, need to find closing brace
                  brace_count=1
                  next_line_num=$((def_start_line + 1))
                  max_lines=30  # Limit to reasonable size
                  current_line=1
                  
                  while [ $brace_count -gt 0 ] && [ $current_line -le $max_lines ] && [ $next_line_num -le $(wc -l < "$file") ]; do
                    next_line=$(sed -n "${next_line_num}p" "$file")
                    
                    # Count opening and closing braces
                    open_braces=$(grep -o "{" <<< "$next_line" | wc -l)
                    close_braces=$(grep -o "}" <<< "$next_line" | wc -l)
                    brace_count=$((brace_count + open_braces - close_braces))
                    
                    # Add line to definition
                    def_lines+=("$next_line")
                    
                    # Check if we've found the end of the definition
                    if [ $brace_count -eq 0 ]; then
                      break
                    fi
                    
                    next_line_num=$((next_line_num + 1))
                    current_line=$((current_line + 1))
                  done
                  
                  # If we hit the line limit but didn't find end, add placeholder
                  if [ $brace_count -gt 0 ]; then
                    def_lines+=("${current_indent}    // ... implementation")
                    def_lines+=("${current_indent}}")
                  fi
                  
                # For single line or simple multi-line definitions ending with semicolon
                elif ! [[ "$line" =~ \;$ ]]; then
                  next_line_num=$((def_start_line + 1))
                  max_lines=10  # Limit to reasonable size for signatures
                  current_line=1
                  
                  while [ $current_line -le $max_lines ] && [ $next_line_num -le $(wc -l < "$file") ]; do
                    next_line=$(sed -n "${next_line_num}p" "$file")
                    def_lines+=("$next_line")
                    
                    # Stop if we hit a semicolon or opening brace
                    if [[ "$next_line" =~ \;$ ]]; then
                      break
                    elif [[ "$next_line" =~ \{$ ]]; then
                      # If we hit an opening brace, add a simplified implementation
                      def_lines+=("${current_indent}    // ... implementation")
                      def_lines+=("${current_indent}}")
                      break
                    fi
                    
                    next_line_num=$((next_line_num + 1))
                    current_line=$((current_line + 1))
                  done
                  
                  # If we hit the limit, add an ellipsis
                  if [ $current_line -gt $max_lines ]; then
                    def_lines+=("${current_indent}    // ... rest of definition")
                    if ! [[ "${def_lines[-1]}" =~ [\;\}]$ ]]; then
                      def_lines+=("${current_indent};")
                    fi
                  fi
                fi
                
                # Output the code block with the full definition
                echo "```rust" >> "$output_file"
                for def_line in "${def_lines[@]}"; do
                  echo "$def_line" >> "$output_file"
                done
                echo "```" >> "$output_file"
                echo "" >> "$output_file"
                
                # Extract doc comments and add after the signature
                doc_start=$((line_num - 1))
                doc_lines=()
                
                while [ $doc_start -gt 0 ]; do
                  doc_line=$(sed -n "${doc_start}p" "$file")
                  if [[ "$doc_line" =~ ^[[:space:]]*\/\/\/ ]]; then
                    comment=$(echo "$doc_line" | sed 's/^[[:space:]]*\/\/\/[[:space:]]*//')
                    doc_lines=("$comment" "${doc_lines[@]}")
                    doc_start=$((doc_start - 1))
                  elif [[ "$doc_line" =~ ^[[:space:]]*$ ]] || [[ "$doc_line" =~ ^[[:space:]]*#\[ ]]; then
                    # Skip empty lines and attributes
                    doc_start=$((doc_start - 1))
                  else
                    break
                  fi
                done
                
                # Process and add doc comments
                if [ ${#doc_lines[@]} -gt 0 ]; then
                  # Process the documentation lines for formatting
                  current_section=""
                  in_section=false
                  
                  for doc_line in "${doc_lines[@]}"; do
                    # Check for section headers
                    if [[ "$doc_line" =~ ^#[[:space:]] ]]; then
                      # If we were in a section, output it first
                      if [ "$in_section" = true ] && [ -n "$current_section" ]; then
                        echo "$current_section" >> "$output_file"
                        echo "" >> "$output_file"
                        current_section=""
                      fi
                      
                      # Output header with extra # for markdown heading level
                      echo "#### ${doc_line:2}" >> "$output_file"
                      echo "" >> "$output_file"
                      in_section=false
                    # Handle list items
                    elif [[ "$doc_line" =~ ^\*[[:space:]] ]]; then
                      # If we were in a paragraph, output it first
                      if [ "$in_section" = true ] && [ -n "$current_section" ]; then
                        echo "$current_section" >> "$output_file"
                        echo "" >> "$output_file"
                        current_section=""
                        in_section=false
                      fi
                      
                      # Output list item directly
                      echo "$doc_line" >> "$output_file"
                    # Regular paragraph text
                    else
                      if [ "$in_section" = true ]; then
                        # If continuing a paragraph, add a space instead of newline
                        current_section="${current_section} ${doc_line}"
                      else
                        # Starting a new paragraph
                        current_section="${doc_line}"
                        in_section=true
                      fi
                    fi
                  done
                  
                  # Output any remaining section
                  if [ "$in_section" = true ] && [ -n "$current_section" ]; then
                    echo "$current_section" >> "$output_file"
                    echo "" >> "$output_file"
                  fi
                fi
                
                extracted_items=$((extracted_items + 1))
              fi
            done
            
            # If no items were extracted, add a message
            if [ "$extracted_items" -eq 0 ]; then
              echo "No public items found in this file." >> "$output_file"
              echo "" >> "$output_file"
            fi
            
            # Add link to Home.md
            echo "* [$unique_name](${unique_name})" >> wiki-content/Home.md
          done

      - name: Setup Git for Wiki
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Clone Wiki Repository
        run: |
          # Use PAT for wiki push
          git clone https://${{ secrets.WIKI_TOKEN }}@github.com/${{ github.repository }}.wiki.git wiki-repo
          
          # Copy content to wiki
          cp -r wiki-content/* wiki-repo/
          
          cd wiki-repo
          git add .
          
          # Commit if changes exist
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation from Rust code (${GITHUB_SHA:0:7})"
            git push
          fi

      - name: Upload Markdown as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wiki-docs
          path: wiki-content/
