name: Rust Docs to Wiki

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.rs'
      - 'Cargo.toml'
      - '.github/workflows/rust-docs-to-wiki.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  extract-doc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create wiki directory
        run: mkdir -p wiki-content

      - name: Process all Rust files
        run: |
          # Create Home.md
          echo "# ${GITHUB_REPOSITORY#*/} Documentation" > wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "This wiki contains automatically generated documentation from the Rust codebase." >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md
          echo "## Modules" >> wiki-content/Home.md
          echo "" >> wiki-content/Home.md

          # Process all Rust files
          find src -name "*.rs" -type f | while read -r file; do
            # Get file info
            base_name=$(basename "$file" .rs)
            dir_path=$(dirname "$file")
            
            # Create unique file name
            unique_name=$(echo "${dir_path//\//_}_${base_name}" | sed 's/^src_//')
            output_file="wiki-content/${unique_name}.md"
            
            echo "Processing $file into $output_file"
            
            # Create file header
            echo "# $base_name ($dir_path)" > "$output_file"
            echo "" >> "$output_file"
            echo "Path: \`$file\`" >> "$output_file"
            echo "" >> "$output_file"
            
            # Extract module docs
            grep -n "^[[:space:]]*//!" "$file" | sed 's/^[0-9]*://g' | sed 's/\/\/![[:space:]]*//' > "$output_file.module_docs"
            if [ -s "$output_file.module_docs" ]; then
              echo "## Module Documentation" >> "$output_file"
              echo "" >> "$output_file"
              cat "$output_file.module_docs" >> "$output_file"
              echo "" >> "$output_file"
            fi
            rm -f "$output_file.module_docs"
            
            # Generate TOC
            echo "## Table of Contents" >> "$output_file"
            echo "" >> "$output_file"
            
            # Extract all public items for TOC
            {
              # Extract public mods
              grep -n "^[[:space:]]*pub[[:space:]]\+mod" "$file" | sed -E 's/^([0-9]+):.*(pub[[:space:]]+mod[[:space:]]+[a-zA-Z0-9_]+).*/\1:\2/'
              
              # Extract public structs 
              grep -n "^[[:space:]]*pub[[:space:]]\+struct" "$file" | sed -E 's/^([0-9]+):.*(pub[[:space:]]+struct[[:space:]]+[a-zA-Z0-9_]+).*/\1:\2/'
              
              # Extract public enums
              grep -n "^[[:space:]]*pub[[:space:]]\+enum" "$file" | sed -E 's/^([0-9]+):.*(pub[[:space:]]+enum[[:space:]]+[a-zA-Z0-9_]+).*/\1:\2/'
              
              # Extract public traits
              grep -n "^[[:space:]]*pub[[:space:]]\+trait" "$file" | sed -E 's/^([0-9]+):.*(pub[[:space:]]+trait[[:space:]]+[a-zA-Z0-9_]+).*/\1:\2/'
              
              # Extract public fns
              grep -n "^[[:space:]]*pub[[:space:]]\+fn" "$file" | sed -E 's/^([0-9]+):.*(pub[[:space:]]+fn[[:space:]]+[a-zA-Z0-9_]+).*/\1:\2/'
              
              # Extract public async fns
              grep -n "^[[:space:]]*pub[[:space:]]\+async[[:space:]]\+fn" "$file" | sed -E 's/^([0-9]+):.*(pub[[:space:]]+async[[:space:]]+fn[[:space:]]+[a-zA-Z0-9_]+).*/\1:\2/'
              
              # Extract public types
              grep -n "^[[:space:]]*pub[[:space:]]\+type" "$file" | sed -E 's/^([0-9]+):.*(pub[[:space:]]+type[[:space:]]+[a-zA-Z0-9_]+).*/\1:\2/'
              
              # Extract public consts
              grep -n "^[[:space:]]*pub[[:space:]]\+const" "$file" | sed -E 's/^([0-9]+):.*(pub[[:space:]]+const[[:space:]]+[a-zA-Z0-9_]+).*/\1:\2/'
              
            } | sort -n > "$output_file.items"
            
            # Generate TOC from items
            while read -r line_info; do
              line_num=$(echo "$line_info" | cut -d: -f1)
              item_line=$(echo "$line_info" | cut -d: -f2-)
              
              # Extract item type and name
              if [[ "$item_line" =~ pub[[:space:]]+mod[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="mod"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#mod-${item_name})" >> "$output_file"
              elif [[ "$item_line" =~ pub[[:space:]]+struct[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="struct"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#struct-${item_name})" >> "$output_file"
              elif [[ "$item_line" =~ pub[[:space:]]+enum[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="enum"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#enum-${item_name})" >> "$output_file"
              elif [[ "$item_line" =~ pub[[:space:]]+trait[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="trait"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#trait-${item_name})" >> "$output_file"
              elif [[ "$item_line" =~ pub[[:space:]]+async[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="async fn"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#async-fn-${item_name})" >> "$output_file"
              elif [[ "$item_line" =~ pub[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="fn"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#fn-${item_name})" >> "$output_file"
              elif [[ "$item_line" =~ pub[[:space:]]+type[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="type"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#type-${item_name})" >> "$output_file"
              elif [[ "$item_line" =~ pub[[:space:]]+const[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="const"
                item_name="${BASH_REMATCH[1]}"
                echo "* [$item_type $item_name](#const-${item_name})" >> "$output_file"
              fi
            done < "$output_file.items"
            
            echo "" >> "$output_file"
            echo "## Public Items" >> "$output_file"
            echo "" >> "$output_file"
            
            # Process all public items
            while read -r line_info; do
              line_num=$(echo "$line_info" | cut -d: -f1)
              item_line=$(echo "$line_info" | cut -d: -f2-)
              
              # Extract item type and name
              item_type=""
              item_name=""
              
              if [[ "$item_line" =~ pub[[:space:]]+mod[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="mod"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$item_line" =~ pub[[:space:]]+struct[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="struct"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$item_line" =~ pub[[:space:]]+enum[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="enum"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$item_line" =~ pub[[:space:]]+trait[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="trait"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$item_line" =~ pub[[:space:]]+async[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="async fn"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$item_line" =~ pub[[:space:]]+fn[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="fn"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$item_line" =~ pub[[:space:]]+type[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="type"
                item_name="${BASH_REMATCH[1]}"
              elif [[ "$item_line" =~ pub[[:space:]]+const[[:space:]]+([a-zA-Z0-9_]+) ]]; then
                item_type="const"
                item_name="${BASH_REMATCH[1]}"
              fi
              
              if [ -n "$item_type" ] && [ -n "$item_name" ]; then
                # Add title
                if [[ "$item_type" == "async fn" ]]; then
                  echo "### async fn $item_name" >> "$output_file"
                else
                  echo "### $item_type $item_name" >> "$output_file"
                fi
                echo "" >> "$output_file"
                
                # Extract doc comments first
                doc_start=$((line_num - 1))
                doc_lines=()
                
                while [ $doc_start -gt 0 ]; do
                  doc_line=$(sed -n "${doc_start}p" "$file")
                  if [[ "$doc_line" =~ ^[[:space:]]*\/\/\/ ]]; then
                    comment=$(echo "$doc_line" | sed 's/^[[:space:]]*\/\/\/[[:space:]]*//')
                    doc_lines=("$comment" "${doc_lines[@]}")
                    doc_start=$((doc_start - 1))
                  elif [[ "$doc_line" =~ ^[[:space:]]*$ ]] || [[ "$doc_line" =~ ^[[:space:]]*#\[ ]]; then
                    # Skip empty lines and attributes
                    doc_start=$((doc_start - 1))
                  else
                    break
                  fi
                done
                
                # EXTRACT FULL DEFINITION
                # Create a temporary file to store full item definition
                temp_def_file="${output_file}.def.tmp"
                
                # Start with current line
                echo "$item_line" > "$temp_def_file"
                
                # Determine how to extract based on item type
                case "$item_type" in
                  "mod")
                    # For module, it's typically just one line with a semicolon
                    ;;
                  "struct"|"enum"|"trait")
                    # These typically have a body with braces
                    if ! [[ "$item_line" =~ \;$ ]]; then
                      # Find the closing brace
                      next_line_num=$((line_num + 1))
                      brace_count=$(grep -o "{" <<< "$item_line" | wc -l)
                      brace_count=$((brace_count - $(grep -o "}" <<< "$item_line" | wc -l)))
                      
                      # Continue until we find matching closing brace
                      while [ $brace_count -gt 0 ] && [ $next_line_num -le $(wc -l < "$file") ]; do
                        next_line=$(sed -n "${next_line_num}p" "$file")
                        echo "$next_line" >> "$temp_def_file"
                        
                        # Update brace count
                        brace_count=$((brace_count + $(grep -o "{" <<< "$next_line" | wc -l)))
                        brace_count=$((brace_count - $(grep -o "}" <<< "$next_line" | wc -l)))
                        
                        next_line_num=$((next_line_num + 1))
                        
                        # Limit to 50 lines max to avoid excessive output
                        if [ $((next_line_num - line_num)) -gt 50 ]; then
                          echo "    // ... additional implementation" >> "$temp_def_file"
                          echo "}" >> "$temp_def_file"
                          break
                        fi
                      done
                    fi
                    ;;
                  "fn"|"async fn")
                    # Functions can end with a semicolon or have a body
                    if ! [[ "$item_line" =~ \;$ ]]; then
                      # Find the closing brace if it has a body
                      next_line_num=$((line_num + 1))
                      
                      # If the function signature spans multiple lines
                      while [ $next_line_num -le $(wc -l < "$file") ]; do
                        next_line=$(sed -n "${next_line_num}p" "$file")
                        echo "$next_line" >> "$temp_def_file"
                        
                        # If we found a semicolon, we're done
                        if [[ "$next_line" =~ \;$ ]]; then
                          break
                        fi
                        
                        # If we found an opening brace, need to find matching closing brace
                        if [[ "$next_line" =~ \{$ ]]; then
                          echo "    // ... function body" >> "$temp_def_file"
                          echo "}" >> "$temp_def_file"
                          break
                        fi
                        
                        next_line_num=$((next_line_num + 1))
                        
                        # Limit to reasonable size
                        if [ $((next_line_num - line_num)) -gt 20 ]; then
                          if ! [[ "$next_line" =~ [\;\{] ]]; then
                            echo "    // ... function definition continues" >> "$temp_def_file"
                          fi
                          break
                        fi
                      done
                    fi
                    ;;
                  "type"|"const")
                    # These typically end with a semicolon
                    if ! [[ "$item_line" =~ \;$ ]]; then
                      next_line_num=$((line_num + 1))
                      
                      # Continue until semicolon
                      while [ $next_line_num -le $(wc -l < "$file") ]; do
                        next_line=$(sed -n "${next_line_num}p" "$file")
                        echo "$next_line" >> "$temp_def_file"
                        
                        if [[ "$next_line" =~ \;$ ]]; then
                          break
                        fi
                        
                        next_line_num=$((next_line_num + 1))
                        
                        # Limit to reasonable size
                        if [ $((next_line_num - line_num)) -gt 10 ]; then
                          if ! [[ "$next_line" =~ \;$ ]]; then
                            echo "    // ... definition continues" >> "$temp_def_file"
                            echo ";" >> "$temp_def_file"
                          fi
                          break
                        fi
                      done
                    fi
                    ;;
                esac
                
                # Output the code block with the definition
                echo '```rust' >> "$output_file"
                cat "$temp_def_file" >> "$output_file"
                echo '```' >> "$output_file"
                echo "" >> "$output_file"
                
                # Clean up temp file
                rm -f "$temp_def_file"
                
                # Process and add doc comments
                if [ ${#doc_lines[@]} -gt 0 ]; then
                  # Process the documentation lines for formatting
                  current_section=""
                  in_section=false
                  
                  for doc_line in "${doc_lines[@]}"; do
                    # Check for section headers
                    if [[ "$doc_line" =~ ^#[[:space:]] ]]; then
                      # If we were in a section, output it first
                      if [ "$in_section" = true ] && [ -n "$current_section" ]; then
                        echo "$current_section" >> "$output_file"
                        echo "" >> "$output_file"
                        current_section=""
                      fi
                      
                      # Output header with extra # for markdown heading level
                      echo "#### ${doc_line:2}" >> "$output_file"
                      echo "" >> "$output_file"
                      in_section=false
                    # Handle list items
                    elif [[ "$doc_line" =~ ^\*[[:space:]] ]]; then
                      # If we were in a paragraph, output it first
                      if [ "$in_section" = true ] && [ -n "$current_section" ]; then
                        echo "$current_section" >> "$output_file"
                        echo "" >> "$output_file"
                        current_section=""
                        in_section=false
                      fi
                      
                      # Output list item directly
                      echo "$doc_line" >> "$output_file"
                    # Regular paragraph text
                    else
                      if [ "$in_section" = true ]; then
                        # If continuing a paragraph, add a space instead of newline
                        current_section="${current_section} ${doc_line}"
                      else
                        # Starting a new paragraph
                        current_section="${doc_line}"
                        in_section=true
                      fi
                    fi
                  done
                  
                  # Output any remaining section
                  if [ "$in_section" = true ] && [ -n "$current_section" ]; then
                    echo "$current_section" >> "$output_file"
                    echo "" >> "$output_file"
                  fi
                fi
              fi
            done < "$output_file.items"
            
            # Clean up temporary files
            rm -f "$output_file.items"
            
            # Add link to Home.md
            echo "* [$unique_name](${unique_name})" >> wiki-content/Home.md
          done

      - name: Setup Git for Wiki
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Clone Wiki Repository
        run: |
          # Use PAT for wiki push
          git clone https://${{ secrets.WIKI_TOKEN }}@github.com/${{ github.repository }}.wiki.git wiki-repo
          
          # Copy content to wiki
          cp -r wiki-content/* wiki-repo/
          
          cd wiki-repo
          git add .
          
          # Commit if changes exist
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update documentation from Rust code (${GITHUB_SHA:0:7})"
            git push
          fi

      - name: Upload Markdown as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wiki-docs
          path: wiki-content/
