-- -- Create database if not exists
-- CREATE DATABASE IF NOT EXISTS omni_logs;
-- 
-- -- Create the logs table
-- CREATE TABLE IF NOT EXISTS omni_logs.logs (
--     log_id UUID,
--     timestamp DateTime,
--     platform_id LowCardinality(String),
--     org_id LowCardinality(String),
--     app_id LowCardinality(String),
--     instance_id String,
--     level Enum8('debug'=1, 'info'=2, 'warn'=3, 'error'=4, 'fatal'=5),
--     message String,
--     context String CODEC(ZSTD(3)),
--     event_date Date DEFAULT toDate(timestamp)
-- ) 
-- ENGINE = MergeTree()
-- PARTITION BY toYYYYMM(timestamp)
-- ORDER BY (platform_id, org_id, app_id, timestamp)
-- TTL timestamp + INTERVAL 90 DAY
-- SETTINGS index_granularity = 8192, min_bytes_for_wide_part=0;
-- 
-- -- Create indexes with IF NOT EXISTS
-- -- Use standard index types for better compatibility
-- ALTER TABLE omni_logs.logs ADD INDEX IF NOT EXISTS message_idx message TYPE minmax GRANULARITY 4;
-- ALTER TABLE omni_logs.logs ADD INDEX IF NOT EXISTS platform_org_app_idx (platform_id, org_id, app_id) TYPE set(0) GRANULARITY 1;
-- 
-- -- Create materialized views with IF NOT EXISTS
-- CREATE MATERIALIZED VIEW IF NOT EXISTS omni_logs.error_counts_mv
-- ENGINE = SummingMergeTree
-- PARTITION BY toYYYYMM(event_date)
-- ORDER BY (event_date, platform_id, org_id, app_id, level)
-- AS SELECT
--     toDate(timestamp) as event_date,
--     platform_id,
--     org_id, 
--     app_id,
--     level,
--     count() as error_count
-- FROM omni_logs.logs
-- GROUP BY toDate(timestamp), platform_id, org_id, app_id, level;
-- 
-- CREATE MATERIALIZED VIEW IF NOT EXISTS omni_logs.log_volume_mv
-- ENGINE = SummingMergeTree
-- PARTITION BY toYYYYMM(event_date)
-- ORDER BY (event_date, platform_id, org_id)
-- AS SELECT
--     toDate(timestamp) as event_date,
--     platform_id,
--     org_id,
--     count() as log_count,
--     sum(length(message)) as total_message_bytes
-- FROM omni_logs.logs
-- GROUP BY toDate(timestamp), platform_id, org_id;
-- 
-- -- Skip dictionary creation for now - can add later once there's data
-- 
-- -- Create dictionary only after data exists in the table
-- -- Comment this out initially
-- 
-- -- CREATE DICTIONARY IF NOT EXISTS omni_logs.app_dict (
-- --     app_id String,
-- --     platform_id String,
-- --     org_id String
-- -- )
-- -- PRIMARY KEY app_id
-- -- SOURCE(CLICKHOUSE(TABLE 'omni_logs.logs' FILTER (length(app_id) > 0)))
-- -- LIFETIME(MIN 300 MAX 600)
-- -- LAYOUT(HASHED());